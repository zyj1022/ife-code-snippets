{
	"import React": {
        "prefix": "imr",
        "body": ["import * as React from 'react';"],
        "description": "Import React"
    },
    "import React and Component": {
        "prefix": "imfc",
        "body": [
            "import React, { Fragment, Component } from 'react';"
        ],
        "description": "Import React, { Component, Fragment }"
    },
    "import react hooks": {
		"prefix": "imhs",
		"body": [
			"import React, { useState, useContext, useEffect, useCallback, useMemo } from 'react';"
		]
	},
	"import react general package": {
		"prefix": "imall",
		"body": [
			"import React, { Fragment, Component } from 'react';",
			"import { observer, inject } from 'mobx-react';",
			"import { toJS } from 'mobx';",
			"import styled from 'styled-components';",
			"import { Button } from 'antd';"
		],
		"description": "import react general package"
	},
	"Class Component": {
        "prefix": "cc",
        "body": [
            "export default class $1 extends Component {",
            "\tstate = { $2 }",
            "\trender() { ",
            "\t\treturn ( $0 );",
            "\t}",
            "}",
        ],
        "description": "Class Component"
    },
	"Function Component": {
		"prefix": "fc",
        "body": [
            "export interface $1Props {",
            "\t$2",
            "}",
            " ",
            "const $1: React.FC<$1Props> = ($3) => {",
            "\treturn ( $0 );",
            "}",
            " ",
            "export default $1;"
        ],
        "description": "Function Component"
    },
	"render": {
        "prefix": "render",
        "body": ["render() {", "\treturn (", "\t\t $0", "\t);", "}"],
        "description": "render"
    },
	"useState": {
		"prefix": "uses",
		"body": [
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"
		],
		"description": "useState() hook"
	},
	"useEffect": {
        "prefix": "usee",
        "body": [
            "useEffect(() => {",
            "\t$1",
            "}, []);"
        ],
        "description": "useEffect() hook"
    },
	"useContext": {
		"prefix": "usec",
		"body": [
			"const $1 = useContext($2);$0"
		],
		"description": "useContext() hook"
	},
	"useCallback": {
		"prefix": "usecb",
		"body": [
			"const ${1:memoizedCallback} = useCallback(",
			"\t() => {",
			"\t\t${2:doSomething}(${3:a}, ${4:b})",
			"\t},",
			"\t[${5:a}, ${6:b}],",
			");$0"
		],
		"description": "useCallback() hook"
	},
	"useRef": {
		"prefix": "user",
		"body": [
			"const $1 = useRef($2);$0"
		],
		"description": "useRef() hook"
	},
	"useMemo": {
		"prefix": "usem",
		"body": [
			"const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}]);$0"
		],
		"description": "useMemo() hook"
	},
	"console.log": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "clog",
		"body": [
			"console.log('$1');"
		],
		"description": "console.log()"
	}
}